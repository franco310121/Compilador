/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.uni.compilador.interfaz;

import com.uni.compilador.analisis.lexico.AnalizadorLexico;
import com.uni.compilador.analisis.lexico.ErrorLexico;
import com.uni.compilador.analisis.lexico.Token;
import com.uni.compilador.analisis.sintactico.ASTPrinter;
import com.uni.compilador.analisis.sintactico.ErrorSintactico;
import com.uni.compilador.analisis.sintactico.LectorGramatica;
import com.uni.compilador.analisis.sintactico.NodoAST;
import com.uni.compilador.analisis.sintactico.ParserAST;
import com.uni.compilador.analisis.sintactico.Regla;
import java.util.List;
import java.util.Map;

/**
 *
 * @author Usuario
 */
public class Compilador extends javax.swing.JFrame {

    /**
     * Creates new form Compilador
     */
    public Compilador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cpnInput = new javax.swing.JScrollPane();
        txtAreaInput = new javax.swing.JTextArea();
        cpnOutput = new javax.swing.JScrollPane();
        txtAreaOutput = new javax.swing.JTextArea();
        btnCompilar = new javax.swing.JButton();
        cpnAnalisis = new javax.swing.JScrollPane();
        txtAreaAnalisis = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("JetBrains Mono", 1, 24)); // NOI18N
        jLabel1.setText("COMPILADOR");

        cpnInput.setViewportBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("JetBrains Mono", 0, 12))); // NOI18N
        cpnInput.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N

        txtAreaInput.setColumns(20);
        txtAreaInput.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N
        txtAreaInput.setRows(5);
        cpnInput.setViewportView(txtAreaInput);

        cpnOutput.setViewportBorder(javax.swing.BorderFactory.createTitledBorder(null, "Output", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("JetBrains Mono", 0, 12))); // NOI18N
        cpnOutput.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N

        txtAreaOutput.setColumns(20);
        txtAreaOutput.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N
        txtAreaOutput.setForeground(new java.awt.Color(51, 51, 51));
        txtAreaOutput.setRows(5);
        cpnOutput.setViewportView(txtAreaOutput);

        btnCompilar.setBackground(new java.awt.Color(102, 102, 102));
        btnCompilar.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N
        btnCompilar.setForeground(new java.awt.Color(255, 255, 255));
        btnCompilar.setText("Compilar");
        btnCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompilarActionPerformed(evt);
            }
        });

        cpnAnalisis.setViewportBorder(javax.swing.BorderFactory.createTitledBorder(null, "Analsis", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("JetBrains Mono", 0, 12))); // NOI18N
        cpnAnalisis.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N

        txtAreaAnalisis.setColumns(20);
        txtAreaAnalisis.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N
        txtAreaAnalisis.setRows(5);
        cpnAnalisis.setViewportView(txtAreaAnalisis);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cpnInput, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCompilar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cpnOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addComponent(cpnAnalisis, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(462, 462, 462))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cpnInput, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCompilar))
                        .addGap(18, 18, 18)
                        .addComponent(cpnOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cpnAnalisis))
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompilarActionPerformed
        String codigoFuente = txtAreaInput.getText();
    AnalizadorLexico analizador = new AnalizadorLexico(codigoFuente);
    analizador.analizar();

    List<Token> tokens = analizador.getTokens();
    String tabla = formatearTokensComoTabla(tokens);
    txtAreaAnalisis.setText(tabla); // Mostrar tokens

    List<ErrorLexico> errores = analizador.getErrores();
    String textoErrores = formatearErroresComoTexto(errores);
    txtAreaOutput.setText(textoErrores); // Mostrar errores léxicos

    // Solo continuar si no hay errores léxicos
    if (errores.isEmpty()) {
        try {
            // Cargar gramática desde archivo JSON
            Map<String, Regla> gramatica = LectorGramatica.cargarDesdeArchivo("src/main/java/com/uni/compilador/analisis/sintactico/gramatica.json");

            ParserAST parser = new ParserAST(gramatica, tokens);
            NodoAST arbol = parser.parse("programa");

            if (arbol != null) {
                String arbolTexto = ASTPrinter.imprimir(arbol);
                txtAreaOutput.append("Análisis sintáctico exitoso.\n\n" );
                txtAreaAnalisis.append("\n[AST - Arbol de Sintaxis Abstracta]\n");
                txtAreaAnalisis.append(arbolTexto);
            } else {
                StringBuilder sb = new StringBuilder();
                for (ErrorSintactico error : parser.getErrores()) {
                    sb.append(error.toString()).append("\n");
                }
                txtAreaOutput.setText(sb.toString());
            }

        } catch (Exception e) {
            txtAreaOutput.setText("Error al cargar la gramática: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_btnCompilarActionPerformed

    private String formatearTokensComoTabla(List<Token> tokens) {
        StringBuilder sb = new StringBuilder();
        sb.append("------------------ TABLA DE TOKENS -------------------\n");
        sb.append(String.format("%-21s%-16s%-10s%-10s\n", "Tipo", "Valor", "Línea", "Columna"));
        sb.append("-------------------------------------------------------\n");

        for (Token token : tokens) {
            sb.append(String.format("%-21s%-16s%-10d%-10d\n",
                    token.getTipo(),
                    token.getValor(),
                    token.getLinea(),
                    token.getColumna()));
        }

        return sb.toString();
    }

    private String formatearErroresComoTexto(List<ErrorLexico> errores) {
        if (errores.isEmpty()) {
            return "No se encontraron errores léxicos.\n";
        }

        StringBuilder sb = new StringBuilder();
        for (ErrorLexico error : errores) {
            sb.append(error.toString()).append("\n");
        }
        return sb.toString();
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Compilador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCompilar;
    private javax.swing.JScrollPane cpnAnalisis;
    private javax.swing.JScrollPane cpnInput;
    private javax.swing.JScrollPane cpnOutput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextArea txtAreaAnalisis;
    private javax.swing.JTextArea txtAreaInput;
    private javax.swing.JTextArea txtAreaOutput;
    // End of variables declaration//GEN-END:variables
}
