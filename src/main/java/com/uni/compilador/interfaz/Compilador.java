/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.uni.compilador.interfaz;

import com.uni.compilador.analisis.backend.GeneradorCodigoIntermedio;
import com.uni.compilador.analisis.backend.TacGenerator;
import com.uni.compilador.analisis.backend.TacOptimizer;
import com.uni.compilador.analisis.lexico.AnalizadorLexico;
import com.uni.compilador.analisis.lexico.ErrorLexico;
import com.uni.compilador.analisis.lexico.Token;
import com.uni.compilador.analisis.semantico.AnalizadorSemantico;
import com.uni.compilador.analisis.semantico.EntradaTablaSimbolos;
import com.uni.compilador.analisis.sintactico.ASTPrinter;
import com.uni.compilador.analisis.sintactico.ErrorSintactico;
import com.uni.compilador.analisis.sintactico.LectorGramatica;
import com.uni.compilador.analisis.sintactico.NodoAST;
import com.uni.compilador.analisis.sintactico.ParserAST;
import com.uni.compilador.analisis.sintactico.Regla;
import java.awt.Font;
import java.util.List;
import java.util.Map;

/**
 *
 * @author Usuario
 */
public class Compilador extends javax.swing.JFrame {

    /**
     * Creates new form Compilador
     */
    public Compilador() {
        initComponents();

        Font fuentePersonalizada = FuenteUtil.cargarFuente(12f); // Cambia el tamaño según lo desees
        FuenteAplicador.aplicarFuente(this.getContentPane(), fuentePersonalizada);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cpnInput = new javax.swing.JScrollPane();
        txtAreaInput = new javax.swing.JTextArea();
        cpnOutput = new javax.swing.JScrollPane();
        txtAreaOutput = new javax.swing.JTextArea();
        btnCompilar = new javax.swing.JButton();
        cpnAnalisis = new javax.swing.JScrollPane();
        txtAreaAnalisis = new javax.swing.JTextArea();
        cpnArbol = new javax.swing.JScrollPane();
        txtAreaArbol = new javax.swing.JTextArea();
        btnCodigoObjeto = new javax.swing.JButton();
        btnSintactico = new javax.swing.JButton();
        btnSemantico = new javax.swing.JButton();
        btnOptimzado = new javax.swing.JButton();
        btnIntermedio = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("JetBrains Mono", 1, 24)); // NOI18N
        jLabel1.setText("COMPILADOR");

        cpnInput.setViewportBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("JetBrains Mono", 0, 12))); // NOI18N
        cpnInput.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N

        txtAreaInput.setColumns(20);
        txtAreaInput.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N
        txtAreaInput.setRows(5);
        cpnInput.setViewportView(txtAreaInput);

        cpnOutput.setViewportBorder(javax.swing.BorderFactory.createTitledBorder(null, "Output", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("JetBrains Mono", 0, 12))); // NOI18N
        cpnOutput.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N

        txtAreaOutput.setColumns(20);
        txtAreaOutput.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N
        txtAreaOutput.setForeground(new java.awt.Color(51, 51, 51));
        txtAreaOutput.setRows(5);
        cpnOutput.setViewportView(txtAreaOutput);

        btnCompilar.setBackground(new java.awt.Color(102, 102, 102));
        btnCompilar.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N
        btnCompilar.setForeground(new java.awt.Color(255, 255, 255));
        btnCompilar.setText("Compilar");
        btnCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompilarActionPerformed(evt);
            }
        });

        cpnAnalisis.setViewportBorder(javax.swing.BorderFactory.createTitledBorder(null, "Analsis", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("JetBrains Mono", 0, 12))); // NOI18N
        cpnAnalisis.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N

        txtAreaAnalisis.setColumns(20);
        txtAreaAnalisis.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N
        txtAreaAnalisis.setRows(5);
        cpnAnalisis.setViewportView(txtAreaAnalisis);

        cpnArbol.setViewportBorder(javax.swing.BorderFactory.createTitledBorder(null, "Analsis", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("JetBrains Mono", 0, 12))); // NOI18N
        cpnArbol.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N

        txtAreaArbol.setColumns(20);
        txtAreaArbol.setFont(new java.awt.Font("JetBrains Mono", 0, 10)); // NOI18N
        txtAreaArbol.setRows(5);
        cpnArbol.setViewportView(txtAreaArbol);

        btnCodigoObjeto.setBackground(new java.awt.Color(102, 102, 102));
        btnCodigoObjeto.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N
        btnCodigoObjeto.setForeground(new java.awt.Color(255, 255, 255));
        btnCodigoObjeto.setText(" Cod. Objeto");
        btnCodigoObjeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCodigoObjetoActionPerformed(evt);
            }
        });

        btnSintactico.setBackground(new java.awt.Color(102, 102, 102));
        btnSintactico.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N
        btnSintactico.setForeground(new java.awt.Color(255, 255, 255));
        btnSintactico.setText("Sintactico");
        btnSintactico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSintacticoActionPerformed(evt);
            }
        });

        btnSemantico.setBackground(new java.awt.Color(102, 102, 102));
        btnSemantico.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N
        btnSemantico.setForeground(new java.awt.Color(255, 255, 255));
        btnSemantico.setText("Semantico");
        btnSemantico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSemanticoActionPerformed(evt);
            }
        });

        btnOptimzado.setBackground(new java.awt.Color(102, 102, 102));
        btnOptimzado.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N
        btnOptimzado.setForeground(new java.awt.Color(255, 255, 255));
        btnOptimzado.setText("Optimizado");
        btnOptimzado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOptimzadoActionPerformed(evt);
            }
        });

        btnIntermedio.setBackground(new java.awt.Color(102, 102, 102));
        btnIntermedio.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N
        btnIntermedio.setForeground(new java.awt.Color(255, 255, 255));
        btnIntermedio.setText("Intermedio");
        btnIntermedio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIntermedioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(285, 285, 285)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cpnInput, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                                .addComponent(cpnOutput))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCompilar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSintactico, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSemantico, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnIntermedio, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnOptimzado, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCodigoObjeto)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                        .addComponent(cpnAnalisis, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)))
                .addComponent(cpnArbol, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cpnArbol, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnCompilar)
                                    .addComponent(btnSintactico)
                                    .addComponent(btnSemantico))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnCodigoObjeto)
                                    .addComponent(btnIntermedio)
                                    .addComponent(btnOptimzado))
                                .addGap(18, 18, 18)
                                .addComponent(cpnInput, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cpnOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cpnAnalisis, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    String codigoFuente;
    AnalizadorLexico analizador;
    List<Token> tokens;
    ParserAST parser;
    NodoAST arbol;
    AnalizadorSemantico analizadorSemantico;
    String tac;
    String tacOptimizado;
    
    private void btnCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompilarActionPerformed
        codigoFuente = txtAreaInput.getText();

        analizador = new AnalizadorLexico(codigoFuente);
        analizador.analizar();

        tokens = analizador.getTokens();
        String tabla = formatearTokensComoTabla(tokens);

        List<ErrorLexico> erroresLexicos = analizador.getErrores();
        String textoErrores = formatearErroresComoTexto(erroresLexicos);
        txtAreaOutput.setText(textoErrores);

        if (erroresLexicos.isEmpty()) {
            try {
                Map<String, Regla> gramatica = LectorGramatica.cargarDesdeArchivo(
                        "src/main/java/com/uni/compilador/analisis/sintactico/gramatica.json"
                );

                parser = new ParserAST(gramatica, tokens);
                arbol = parser.parse("programa");

                if (arbol != null) {
                    String arbolTexto = ASTPrinter.imprimir(arbol);
                    txtAreaOutput.append("No se encontraron errores sintácticos.\n");
                    txtAreaArbol.setText("\n[AST - Árbol de Sintaxis Abstracta]\n");
                    txtAreaArbol.append(arbolTexto);

                    analizadorSemantico = new AnalizadorSemantico();
                    analizadorSemantico.analizar(arbol);

                    // Mostrar tabla de símbolos
                    List<EntradaTablaSimbolos> tablaSimbolos = analizadorSemantico.getTabla();
                    txtAreaAnalisis.append("\n[TABLA DE SÍMBOLOS]\n");
                    txtAreaAnalisis.append(String.format("%-12s %-8s %-10s %-7s %-6s %s\n",
                            "Nombre", "Tipo", "Categoría", "Alcance", "Línea", "Valor"));
                    txtAreaAnalisis.append("---------------------------------------------------------------\n");

                    for (EntradaTablaSimbolos entrada : tablaSimbolos) {
                        txtAreaAnalisis.append(entrada.toString() + "\n");
                    }

                    List<String> erroresSemanticos = analizadorSemantico.getErrores();
                    if (!erroresSemanticos.isEmpty()) {
                        txtAreaOutput.append("\n[Errores Semánticos]\n");
                        for (String err : erroresSemanticos) {
                            txtAreaOutput.append(err + "\n");
                        }

                        return;
                    } else {
                        txtAreaOutput.append("\nNo se encontraron errores semánticos.\n");
                    }

                    tac = TacGenerator.generateTAC(codigoFuente);
                    txtAreaArbol.append("\n[-------- CODIGO TAC GENERADO --------]\n");
                    txtAreaArbol.append(tac);

                    tacOptimizado = TacOptimizer.optimize(tac);
                    txtAreaArbol.append("\n[-------- CODIGO TAC OPTIMIZADO --------]\n");
                    txtAreaArbol.append(tacOptimizado);

                } else {
                    // Si hay errores sintácticos
                    StringBuilder sb = new StringBuilder();
                    for (ErrorSintactico error : parser.getErrores()) {
                        sb.append(error.toString()).append("\n");
                    }
                    txtAreaOutput.setText(sb.toString());
                }

            } catch (Exception e) {
                txtAreaOutput.setText("Error al cargar la gramática: " + e.getMessage());
                e.printStackTrace();
            }
        }


    }//GEN-LAST:event_btnCompilarActionPerformed

    private void btnCodigoObjetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCodigoObjetoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCodigoObjetoActionPerformed

    private void btnSintacticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSintacticoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSintacticoActionPerformed

    private void btnSemanticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSemanticoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSemanticoActionPerformed

    private void btnOptimzadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOptimzadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnOptimzadoActionPerformed

    private void btnIntermedioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIntermedioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnIntermedioActionPerformed

    private String formatearTokensComoTabla(List<Token> tokens) {
        StringBuilder sb = new StringBuilder();
        sb.append("------------------ TABLA DE TOKENS -------------------\n");
        sb.append(String.format("%-21s%-16s%-10s%-10s\n", "Tipo", "Valor", "Línea", "Columna"));
        sb.append("-------------------------------------------------------\n");

        for (Token token : tokens) {
            sb.append(String.format("%-21s%-16s%-10d%-10d\n",
                    token.getTipo(),
                    token.getValor(),
                    token.getLinea(),
                    token.getColumna()));
        }

        return sb.toString();
    }

    private String formatearErroresComoTexto(List<ErrorLexico> errores) {
        if (errores.isEmpty()) {
            return "No se encontraron errores léxicos.\n";
        }

        StringBuilder sb = new StringBuilder();
        for (ErrorLexico error : errores) {
            sb.append(error.toString()).append("\n");
        }
        return sb.toString();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Compilador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCodigoObjeto;
    private javax.swing.JButton btnCompilar;
    private javax.swing.JButton btnIntermedio;
    private javax.swing.JButton btnOptimzado;
    private javax.swing.JButton btnSemantico;
    private javax.swing.JButton btnSintactico;
    private javax.swing.JScrollPane cpnAnalisis;
    private javax.swing.JScrollPane cpnArbol;
    private javax.swing.JScrollPane cpnInput;
    private javax.swing.JScrollPane cpnOutput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextArea txtAreaAnalisis;
    private javax.swing.JTextArea txtAreaArbol;
    private javax.swing.JTextArea txtAreaInput;
    private javax.swing.JTextArea txtAreaOutput;
    // End of variables declaration//GEN-END:variables
}
